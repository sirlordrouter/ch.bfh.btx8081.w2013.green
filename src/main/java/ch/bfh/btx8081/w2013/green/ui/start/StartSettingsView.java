package ch.bfh.btx8081.w2013.green.ui.start;

import java.util.ArrayList;
import java.util.List;

import ch.bfh.btx8081.w2013.green.data.FakeDataAccess;
import ch.bfh.btx8081.w2013.green.data.entities.Patient;
import ch.bfh.btx8081.w2013.green.ui.state.AuthenticatedState;

import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.navigator.Navigator;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Notification;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Button.ClickEvent;

public class StartSettingsView extends VerticalLayout implements View, IStartSettingsView {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private static final String BUTTON_LOGOUT = "LOGOUT";
	private static final String BUTTON_SKILLSETTINGS = "Skill Settings";
	private static final String BUTTON_HELPSETTINGS = "Help Settings";
	private static final String BUTTON_MEDICPSETTINGS = "Medic Settings";
	private static final String BUTTON_WIDTH = "120px";
	private final Navigator navigator;
	private BeanItemContainer<Patient> patientContainer;
	private ComboBox selectPatient;
	private Patient selectedPatient;
	private List<IPatientChangedListener> patientChangedListeners = new
			ArrayList();

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 * 
	 * This settings view is meant for administrators who configure the mental
	 * health app for the patients.
	 */
	public StartSettingsView(Navigator nav) {

		this.navigator = nav;

		setWidth(MyVaadinUI.APP_WIDTH);
		setHeight(MyVaadinUI.APP_HIGHT);
		//Creating a fake Patientlist
		FakeDataAccess fda = new FakeDataAccess();
		final ArrayList<Patient> patientList = new ArrayList<Patient>(fda.getPatients());
		
		//Combobox for selecting a patient.
		final ComboBox patientComboBox = new ComboBox("Select Patient");
		patientComboBox.setImmediate(true);

		patientContainer = new BeanItemContainer<Patient>(Patient.class);

	    
	    // Create a selection component bound to the container
	    selectPatient = new ComboBox("Patients", patientContainer);
	    // from the 'name' property of the bean
	    selectPatient.setItemCaptionPropertyId("patientName");
	    selectPatient.addValueChangeListener(new PatientListener());

		
		//Putting the patients from the patientlist in the combobox.
        for (Patient p : patientList) {
			patientContainer.addItem(p);
        }

		
		
		selectPatient.setWidth("200px");
		addComponent(selectPatient);
		setComponentAlignment(selectPatient, Alignment.MIDDLE_CENTER);

		

		
		
		// Creating the 3 Buttons (Help Settings, Skill Settings and Logout)
		// with a Navigator which should navigate to the corresponding view.
		
		Button helpSettingsButton = new Button(BUTTON_HELPSETTINGS,
				new Button.ClickListener() {
					private static final long serialVersionUID = -5797923866320649518L;

					@Override
					public void buttonClick(ClickEvent event) {
						// TODO Should navigate to the help setting view.
						navigator.navigateTo(AuthenticatedState.HELP_SET_VIEW);
					}
				});

		Button skillSettingsButton = new Button(BUTTON_SKILLSETTINGS,
				new Button.ClickListener() {
					private static final long serialVersionUID = 7147554466396214893L;

					@Override
					public void buttonClick(ClickEvent event) {
						// TODO Should navigate to the Skill Setting View.
						navigator.navigateTo("SKILLSETTINGS");

					}
				});
		
		Button medicSettingsButton = new Button(BUTTON_MEDICPSETTINGS,
				new Button.ClickListener() {
					private static final long serialVersionUID = 7147554466396214893L;

					@Override
					public void buttonClick(ClickEvent event) {
						// TODO Should navigate to the Skill Setting View.
						navigator.navigateTo(AuthenticatedState.MEDIC_SET_VIEW);

					}
				});

		Button logoutButton = new Button(BUTTON_LOGOUT,
				new Button.ClickListener() {
					private static final long serialVersionUID = -1096188732209266611L;

					@Override
					public void buttonClick(
							com.vaadin.ui.Button.ClickEvent event) {
						navigator.navigateTo("");
						((MyVaadinUI) MyVaadinUI.getCurrent()).logout();
					}
				});
		
	

		// Adding and aligning the 3 Buttons.
		//Setting a Description for the buttons which is displayed when flying over the button
		addComponent(helpSettingsButton);
		setComponentAlignment(helpSettingsButton, Alignment.MIDDLE_CENTER);
		helpSettingsButton.setDescription("Set the Help options for the Patient");
		helpSettingsButton.setWidth(BUTTON_WIDTH);
		
		addComponent(medicSettingsButton);
		setComponentAlignment(medicSettingsButton, Alignment.MIDDLE_CENTER);
		medicSettingsButton.setDescription("Set the Medication options for the Patient");
		medicSettingsButton.setWidth(BUTTON_WIDTH);

		addComponent(skillSettingsButton);
		setComponentAlignment(skillSettingsButton, Alignment.MIDDLE_CENTER);
		skillSettingsButton.setDescription("Set the Skill options for the Patient");
		skillSettingsButton.setWidth(BUTTON_WIDTH);
		
		
		logoutButton.setWidth(BUTTON_WIDTH);
		addComponent(logoutButton);
		setComponentAlignment(logoutButton, Alignment.MIDDLE_CENTER);
		logoutButton.setDescription("You will be logged out");
		logoutButton.setWidth(BUTTON_WIDTH);
		
		// TODO add user code here
	}

	

	@Override
	public void enter(ViewChangeEvent event) {
		Notification.show("Welcome to the settings homescreen!");
		// TODO Auto-generated method stub

	}
	
	//Done by Esma
	private class PatientListener implements Property.ValueChangeListener{

		@Override
		public void valueChange(ValueChangeEvent event) {
			Object result = ((ComboBox) event.getProperty()).getValue();
			selectedPatient = (Patient) result;
			
			for (IPatientChangedListener pListener : patientChangedListeners) {
				pListener.setSelectedPatient(selectedPatient);
			}
			
		}
		
	}

	@Override
	public void addPatientChangedListener(IPatientChangedListener l) {
		this.patientChangedListeners.add(l);
		
	}

}
